{
  "name": "Joe",
  "tagline": "Joe is a WebDriver (Selenium) Testing Library",
  "body": "# Joe is a WebDriver Testing Library\r\nWhile writing tests you're repeating yourself with writing logs and taking screenshots. This is where Joe comes up. \r\nHe also takes care ab creating a WebDriver. Just use the JUnit Rule Feature.\r\n```java\r\n    @Rule\r\n    public WebDriverRule prod = new WebDriverRule();\r\n```\r\n\r\n```xml\r\n    <dependency>\r\n        <groupId>com.github.maxbraun.test</groupId>\r\n        <artifactId>joe</artifactId>\r\n        <version>0.2.0</version>\r\n    </dependency>\r\n```\r\n\r\n##Logging and Screenshots\r\nWhile you wrote tests you you took screenhots all the time? Joe takes care about this.\r\nJoe takes a screenshot and writes a logfile after operations like clicking or navigating. You can find these files under ``target/test-screenshots/$test-class/$test-method/``. \r\n\r\n##Parameterized tests\r\nJoe can work woith parameterized tests. When Working with these kind of Tests Joe will create seperate logging directories for this.\r\n``target/test-screenshots/$test-class/$test-method/$parameters-name`` \r\n``$parameters-name`` is without further configuration the index of the test. You can also define another name for this by configuration a name in the ``@Parameters.Parameters (name=\"{0}\")`` Annotation. ``{0}``will replace to parameters 1 ``{1}`` to parameter 2 and so on\r\n\r\n##defensive dependencies\r\nJoe knows a lot webdriver implementations. But doesn't force all these dependencies into your classpath. \r\nYou define which webdriver implementation you Need add them to your classpath.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}